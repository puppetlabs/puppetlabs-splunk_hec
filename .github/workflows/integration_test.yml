name: "Integration Testing"

on: [pull_request]

env:
  HONEYCOMB_WRITEKEY: 7f3c63a70eecc61d635917de46bea4e6
  HONEYCOMB_DATASET: litmus tests

jobs:
  # Integration:
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #         - centos-7
  #       puppet_version:
  #         - puppet6-nightly
  #         - puppet7-nightly
  #         - 2019.8.7
  #         - 2019.8.8

  #   env:
  #     BUILDEVENT_FILE: "../buildevents.txt"
  #     CLOUD_CI: 'true'
  #     DOCKER_OPTS:  --registry-mirror=https://mirror.gcr.io

  #   steps:
  #     - run: |
  #         echo 'platform=${{ matrix.platform }}' >> $BUILDEVENT_FILE
  #         echo 'puppet_version=${{ matrix.puppet_version }}' >> $BUILDEVENT_FILE
  #     - name: "Honeycomb: Start recording"
  #       uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
  #       with:
  #         apikey: ${{ env.HONEYCOMB_WRITEKEY }}
  #         dataset: ${{ env.HONEYCOMB_DATASET }}
  #         job-status: ${{ job.status }}
  #         matrix-key: ${{ matrix.platform }}-${{ matrix.puppet_version }}

  #     - name: "Honeycomb: start first step"
  #       run: |
  #         echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-1 >> $GITHUB_ENV
  #         echo STEP_START=$(date +%s) >> $GITHUB_ENV
  #     - name: Checkout Source
  #       uses: actions/checkout@v2

  #     - name: Activate Ruby 2.7
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: "2.7"
  #         bundler-cache: true

  #     - name: Print bundle environment
  #       run: |
  #         echo ::group::bundler environment
  #         buildevents cmd $TRACE_ID $STEP_ID 'bundle env' -- bundle env
  #         echo ::endgroup::
  #     - name: Create the fixtures directory
  #       run: |
  #         echo ::group::Create the fixtures directory
  #         buildevents cmd $TRACE_ID $STEP_ID 'bundle exec rake spec_prep' -- bundle exec rake spec_prep
  #         echo ::endgroup::
  #     - name: "Honeycomb: Record Setup Environment time"
  #       if: ${{ always() }}
  #       run: |
  #         buildevents step $TRACE_ID $STEP_ID $STEP_START 'Setup Environment'
  #         echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-2 >> $GITHUB_ENV
  #         echo STEP_START=$(date +%s) >> $GITHUB_ENV
  #     - name: Provision test environment
  #       run: |
  #         buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run splunk_hec::provision_machines' -- bundle exec bolt --modulepath spec/fixtures/modules plan run splunk_hec::acceptance::provision_machines using='provision_service' image='${{ matrix.platform }}'
  #         echo ::group::=== REQUEST ===
  #         cat request.json || true
  #         echo
  #         echo ::endgroup::
  #         echo ::group::=== INVENTORY ===
  #         if [ -f 'spec/fixtures/litmus_inventory.yaml' ]; then
  #           FILE='spec/fixtures/litmus_inventory.yaml'
  #         elif [ -f 'inventory.yaml' ]; then
  #           FILE='inventory.yaml'
  #         fi
  #         sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
  #         echo ::endgroup::
  #         echo INVENTORY_PATH=$FILE >> $GITHUB_ENV
  #     - name: Install server
  #       run: |
  #         buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run splunk_hec::acceptance::server_setup' -- bundle exec bolt --modulepath spec/fixtures/modules plan run splunk_hec::acceptance::server_setup puppet_version='${{ matrix.puppet_version }}' -i ./$INVENTORY_PATH

  #     - name: Install module
  #       run: |
  #         buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:install_module' -- bundle exec rake 'litmus:install_module'

  #     - name: Set up Splunk instance
  #       run: |
  #         buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance::setup_splunk_instance' -- bundle exec rake acceptance:setup_splunk_instance

  #     - name: Run tests
  #       run: |
  #         buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance::run_tests' -- bundle exec rake acceptance:run_tests

  #     - name: "Honeycomb: Record deployment times"
  #       if: ${{ always() }}
  #       run: |
  #         echo ::group::honeycomb step
  #         buildevents step $TRACE_ID $STEP_ID $STEP_START 'Deploy test system'
  #         echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-3 >> $GITHUB_ENV
  #         echo STEP_START=$(date +%s) >> $GITHUB_ENV
  #         echo ::endgroup::

  #     - name: Remove test environment
  #       if: ${{ always() }}
  #       continue-on-error: true
  #       run: |
  #         if [[ -f inventory.yaml || -f spec/fixtures/litmus_inventory.yaml ]]; then
  #           buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:tear_down' -- bundle exec rake 'litmus:tear_down'
  #           echo ::group::=== REQUEST ===
  #           cat request.json || true
  #           echo
  #           echo ::endgroup::
  #         fi
  #     - name: "Honeycomb: Record removal times"
  #       if: ${{ always() }}
  #       run: |
  #         buildevents step $TRACE_ID $STEP_ID $STEP_START 'Remove test environment'
  Fips-Integration:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - centos-7
        puppet_version:
          - 2019.8.7
          # - 2019.8.8

    env:
      BUILDEVENT_FILE: "../buildevents.txt"
      CLOUD_CI: 'true'
      DOCKER_OPTS:  --registry-mirror=https://mirror.gcr.io

    steps:
      - run: |
          echo 'platform=${{ matrix.platform }}' >> $BUILDEVENT_FILE
          echo 'puppet_version=${{ matrix.puppet_version }}' >> $BUILDEVENT_FILE
      - name: "Honeycomb: Start recording"
        uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
        with:
          apikey: ${{ env.HONEYCOMB_WRITEKEY }}
          dataset: ${{ env.HONEYCOMB_DATASET }}
          job-status: ${{ job.status }}
          matrix-key: ${{ matrix.platform }}-${{ matrix.puppet_version }}

      - name: "Honeycomb: start first step"
        run: |
          echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-1 >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV
      - name: Checkout Source
        uses: actions/checkout@v2

      - name: Activate Ruby 2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
          bundler-cache: true

      - name: Print bundle environment
        run: |
          echo ::group::bundler environment
          buildevents cmd $TRACE_ID $STEP_ID 'bundle env' -- bundle env
          echo ::endgroup::

      - name: Create the fixtures directory
        run: |
          echo ::group::Create the fixtures directory
          buildevents cmd $TRACE_ID $STEP_ID 'bundle exec rake spec_prep' -- bundle exec rake spec_prep
          echo ::endgroup::

      - name: "Honeycomb: Record Setup Environment time"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Setup Environment'
          echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-2 >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: Provision test environment node 1
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run splunk_hec::provision_machines' -- bundle exec bolt --modulepath spec/fixtures/modules plan run splunk_hec::acceptance::provision_machines using='provision_service' image='${{ matrix.platform }}'
          echo ::group::=== REQUEST ===
          cat request.json || true
          echo
          echo ::endgroup::
          echo ::group::=== INVENTORY ===
          if [ -f 'spec/fixtures/litmus_inventory.yaml' ]; then
            FILE='spec/fixtures/litmus_inventory.yaml'
          elif [ -f 'inventory.yaml' ]; then
            FILE='inventory.yaml'
          fi
          sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
          echo ::endgroup::
          echo INVENTORY_PATH=$FILE >> $GITHUB_ENV

      - name: Provision test environment node 2
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run splunk_hec::provision_machines' -- bundle exec bolt --modulepath spec/fixtures/modules plan run splunk_hec::acceptance::provision_machines using='provision_service' image='${{ matrix.platform }}'
          echo ::group::=== REQUEST ===
          cat request.json || true
          echo
          echo ::endgroup::
          echo ::group::=== INVENTORY ===
          if [ -f 'spec/fixtures/litmus_inventory.yaml' ]; then
            FILE='spec/fixtures/litmus_inventory.yaml'
          elif [ -f 'inventory.yaml' ]; then
            FILE='inventory.yaml'
          fi
          sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
          echo ::endgroup::
          echo INVENTORY_PATH=$FILE >> $GITHUB_ENV

      - name: Fix Inventory File
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance:fix_inventory_file' -- bundle exec rake 'acceptance:fix_inventory_file'
          echo ::group::=== INVENTORY ===
          if [ -f 'spec/fixtures/litmus_inventory.yaml' ]; then
            FILE='spec/fixtures/litmus_inventory.yaml'
          elif [ -f 'inventory.yaml' ]; then
            FILE='inventory.yaml'
          fi
          sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
          echo ::endgroup::
          echo INVENTORY_PATH=$FILE >> $GITHUB_ENV

      - name: FIPS Prep Server Node
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance:fips_prep' -- bundle exec rake 'acceptance:fips_prep'

      - name: Install server
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run splunk_hec::acceptance::server_setup' -- bundle exec bolt --modulepath spec/fixtures/modules plan run splunk_hec::acceptance::server_setup puppet_version='${{ matrix.puppet_version }}' -i ./$INVENTORY_PATH

      - name: Install module
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:install_module' -- bundle exec rake 'litmus:install_module'

      - name: Set up Splunk instance
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance::setup_splunk_instance' -- bundle exec rake acceptance:setup_splunk_instance

      - name: Run tests
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'rake acceptance::run_tests' -- bundle exec rake acceptance:run_tests

      - name: "Honeycomb: Record deployment times"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb step
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Deploy test system'
          echo STEP_ID=${{ matrix.platform }}-${{ matrix.puppet_version }}-3 >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: Remove test environment
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if [[ -f inventory.yaml || -f spec/fixtures/litmus_inventory.yaml ]]; then
            buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:tear_down' -- bundle exec rake 'litmus:tear_down'
            echo ::group::=== REQUEST ===
            cat request.json || true
            echo
            echo ::endgroup::
          fi
      - name: "Honeycomb: Record removal times"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Remove test environment'